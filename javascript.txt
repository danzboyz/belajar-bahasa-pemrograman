// Daftar Lengkap dan Mendalam Konsep JavaScript:

// ====================================================================
// I. DASAR-DASAR JAVASCRIPT
// ====================================================================

let = Mendeklarasikan variabel yang nilainya bisa diubah (mutable). Memiliki cakupan blok (block-scoped).
Contoh: let nama = "Budi"; nama = "Agus";

const = Mendeklarasikan variabel konstanta yang nilainya tidak bisa diubah (immutable) setelah inisialisasi. Memiliki cakupan blok.
Contoh: const PI = 3.14159; // Tidak bisa diubah
Catatan: Untuk objek/array, const hanya melarang penggantian referensi, bukan modifikasi isinya.
Contoh: const arr = [1, 2]; arr.push(3); // Boleh; arr = [4]; // Tidak boleh

var = Mendeklarasikan variabel (metode lama sebelum ES6). Memiliki cakupan fungsi (function-scoped) atau global.
Contoh: var angka = 10;
Catatan: Hindari penggunaan var di kode modern karena isu hoisting dan cakupan.

Tipe Data Primitif = Tipe data dasar yang nilainya langsung disimpan.
Contoh:
string = Teks (misal: "Halo", 'JavaScript')
number = Angka (misal: 10, 3.14, -5)
boolean = Benar atau Salah (misal: true, false)
undefined = Variabel dideklarasikan tapi belum diberi nilai.
null = Nilai 'kosong' yang disengaja.
symbol = Nilai unik dan immutable (ES6).
bigint = Bilangan bulat dengan presisi arbitrer (ES2020).

Tipe Data Non-Primitif (Objek) = Tipe data kompleks yang menyimpan koleksi data atau entitas. Nilainya adalah referensi.
Contoh:
object = Kumpulan pasangan kunci-nilai (misal: { nama: "Ani", umur: 25 })
array = Koleksi item yang terurut (misal: [1, 2, 3], ["apel", "pisang"])
function = Blok kode yang dapat dieksekusi.

Operator Aritmatika = Melakukan operasi matematika.
Contoh: + (penjumlahan), - (pengurangan), * (perkalian), / (pembagian), % (modulus), ** (pangkat)

Operator Perbandingan = Membandingkan dua nilai, menghasilkan boolean.
Contoh:
== (sama nilai, tidak peduli tipe)
=== (sama nilai dan tipe, disarankan)
!= (tidak sama nilai)
!== (tidak sama nilai atau tipe)
> (lebih besar), < (lebih kecil), >= (lebih besar sama dengan), <= (lebih kecil sama dengan)

Operator Logika = Menggabungkan atau membalikkan kondisi boolean.
Contoh:
&& (AND, kedua kondisi harus true)
|| (OR, salah satu kondisi true)
! (NOT, membalikkan boolean)

Konversi Tipe (Type Coercion) = JavaScript secara otomatis mengubah tipe data dalam operasi tertentu (implisit) atau secara manual (eksplisit).
Contoh Implisit: console.log("5" + 2); // "52"
Contoh Eksplisit: console.log(Number("5") + 2); // 7
parseInt() = Mengubah string menjadi integer.
parseFloat() = Mengubah string menjadi float.
String() = Mengubah ke string.
Boolean() = Mengubah ke boolean.

Template Literals () = String literals yang memungkinkan ekspresi tertanam (${}) dan string multi-baris.
Contoh: let nama = "Dina"; console.log(Halo, ${nama}!\nSelamat datang.);

// ====================================================================
// II. KONTROL ALIRAN
// ====================================================================

if / else if / else = Melakukan eksekusi kode berdasarkan kondisi.
Contoh:
if (suhu > 30) { console.log("Panas"); } else if (suhu < 10) { console.log("Dingin"); } else { console.log("Normal"); }

switch = Alternatif untuk if/else if berantai ketika membandingkan satu nilai dengan banyak kemungkinan.
Contoh:
switch (hari) { case "Senin": console.log("Awal pekan"); break; default: console.log("Bukan Senin"); }

for loop = Mengulang blok kode sejumlah kali yang ditentukan.
Contoh: for (let i = 0; i < 5; i++) { console.log(i); }

while loop = Mengulang blok kode selama kondisi tertentu terpenuhi.
Contoh: let i = 0; while (i < 3) { console.log(i); i++; }

do...while loop = Mirip while, tetapi blok kode dieksekusi setidaknya sekali sebelum kondisi diperiksa.
Contoh: let count = 0; do { console.log(count); count++; } while (count < 2);

for...of = Mengulang (iterasi) melalui nilai-nilai dalam objek yang dapat diiterasi (Array, String, Map, Set, dll.).
Contoh: const arr = [1, 2, 3]; for (const item of arr) { console.log(item); }

for...in = Mengulang melalui nama properti (kunci) yang dapat dihitung dari sebuah objek.
Contoh: const obj = { a: 1, b: 2 }; for (const key in obj) { console.log(key + ": " + obj[key]); }

break = Menghentikan eksekusi loop atau switch secara paksa.
Contoh: for (let i = 0; i < 10; i++) { if (i === 5) break; console.log(i); }

continue = Melewatkan iterasi saat ini dari loop dan melanjutkan ke iterasi berikutnya.
Contoh: for (let i = 0; i < 5; i++) { if (i === 2) continue; console.log(i); }

// ====================================================================
// III. FUNGSI
// ====================================================================

function declaration = Cara standar mendefinisikan fungsi. Di-hoist (bisa dipanggil sebelum dideklarasikan).
Contoh: function sapa(nama) { return "Halo, " + nama; }

function expression = Mendefinisikan fungsi sebagai bagian dari ekspresi (misal: disimpan di variabel). Tidak di-hoist.
Contoh: const sapa = function(nama) { return "Halo, " + nama; };

Arrow Functions (=>) = Sintaks ringkas untuk menulis fungsi (ES6). Tidak memiliki this sendiri, arguments, super, atau new.target.
Contoh:
const tambah = (a, b) => a + b;
const halo = () => console.log("Halo!");
const getNama = nama => Nama saya ${nama};

Parameter Default = Memberikan nilai default untuk parameter fungsi jika tidak disediakan saat pemanggilan.
Contoh: function greet(nama = "Pengunjung") { console.log(Halo, ${nama}!); }

Rest Parameters (...) = Mengumpulkan argumen sisa menjadi sebuah array.
Contoh: function sum(...angka) { return angka.reduce((total, num) => total + num, 0); }

Spread Syntax (...) = Mengembangkan array atau objek menjadi elemen individual.
Contoh:
// Untuk Array:
const arr1 = [1, 2]; const arr2 = [...arr1, 3, 4]; // [1, 2, 3, 4]
// Untuk Objek:
const obj1 = { a: 1 }; const obj2 = { ...obj1, b: 2 }; // { a: 1, b: 2 }

Callback Functions = Fungsi yang diteruskan sebagai argumen ke fungsi lain dan dieksekusi nanti.
Contoh: function doSomething(callback) { console.log("Melakukan sesuatu..."); callback(); } doSomething(() => console.log("Callback dijalankan!"));

Higher-Order Functions = Fungsi yang menerima fungsi lain sebagai argumen atau mengembalikan fungsi.
Contoh: Array.prototype.map(), Array.prototype.filter(), Array.prototype.reduce()

Closure = Fungsi yang "mengingat" lingkup leksikalnya (variabel dari lingkup di mana ia dideklarasikan), bahkan setelah lingkup tersebut selesai dieksekusi.
Contoh:
function buatCounter() { let count = 0; return function() { count++; return count; }; }
const counter1 = buatCounter(); console.log(counter1()); // 1
console.log(counter1()); // 2

// ====================================================================
// IV. OBJEK DAN ARRAY
// ====================================================================

Objek Literal = Cara paling umum membuat objek.
Contoh: const user = { nama: "Alice", umur: 30, kota: "Jakarta" };

Akses Properti = Mengakses nilai properti objek.
Contoh: user.nama (dot notation) atau user['umur'] (bracket notation)

Menambah/Mengubah Properti =
Contoh: user.email = "alice@example.com"; user.umur = 31;

Menghapus Properti =
Contoh: delete user.kota;

Array Literal = Cara paling umum membuat array.
Contoh: const colors = ["red", "green", "blue"];

Akses Elemen Array = Mengakses elemen berdasarkan indeks (dimulai dari 0).
Contoh: colors[0] // "red"

Metode Array Umum:
push() = Menambah elemen ke akhir array.
pop() = Menghapus elemen dari akhir array.
shift() = Menghapus elemen dari awal array.
unshift() = Menambah elemen ke awal array.
splice() = Mengubah isi array dengan menghapus atau mengganti elemen yang ada dan/atau menambah elemen baru.
slice() = Mengembalikan salinan dangkal dari sebagian array ke array baru.
concat() = Menggabungkan dua atau lebih array.
indexOf() = Mengembalikan indeks pertama di mana elemen tertentu dapat ditemukan.
includes() = Memeriksa apakah array menyertakan nilai tertentu, mengembalikan true/false.
forEach() = Mengeksekusi fungsi yang disediakan sekali untuk setiap elemen array.
map() = Membuat array baru dengan hasil pemanggilan fungsi yang disediakan pada setiap elemen.
filter() = Membuat array baru dengan semua elemen yang lulus tes yang diimplementasikan oleh fungsi yang disediakan.
reduce() = Mengeksekusi fungsi reducer (yang Anda sediakan) pada setiap elemen array, menghasilkan satu nilai output.
find() = Mengembalikan nilai elemen pertama dalam array yang memenuhi fungsi pengujian yang disediakan.
findIndex() = Mengembalikan indeks elemen pertama dalam array yang memenuhi fungsi pengujian yang disediakan.

Destructuring Assignment = Sintaks yang memungkinkan Anda "membongkar" nilai dari array atau properti dari objek ke variabel terpisah.
Contoh Array: const [a, b] = [1, 2];
Contoh Objek: const { nama, umur } = user;

// ====================================================================
// V. PEMROGRAMAN BERORIENTASI OBJEK (OOP) DI JAVASCRIPT
// ====================================================================

Prototype = Mekanisme di mana objek JavaScript mewarisi fitur dari objek lain. Setiap objek memiliki properti internal [[Prototype]].
Contoh: Array.prototype adalah objek di mana semua array mewarisi metode seperti map, filter.

Constructor Functions = Fungsi yang digunakan dengan operator new untuk membuat objek baru.
Contoh:
function Person(name, age) { this.name = name; this.age = age; }
Person.prototype.greet = function() { console.log(Halo, saya ${this.name}); };
const p1 = new Person("Budi", 30);

Classes (ES6) = Sintaks gula (syntactic sugar) di atas prototipe untuk membuat objek dan menangani pewarisan dengan cara yang lebih familiar bagi programmer OOP.
Contoh:
class Animal {
constructor(name) { this.name = name; }
speak() { console.log(${this.name} membuat suara.); }
}
class Dog extends Animal {
constructor(name, breed) { super(name); this.breed = breed; }
speak() { console.log(${this.name} menggonggong!); }
}
const myDog = new Dog("Buddy", "Golden"); myDog.speak();

this Keyword = Mengacu pada konteks eksekusi fungsi. Nilainya bergantung pada bagaimana fungsi dipanggil.
* Dalam metode objek: this mengacu pada objek itu sendiri.
* Dalam fungsi biasa (non-strict mode): this mengacu pada objek global (window di browser, global di Node.js).
* Dalam fungsi panah: this mewarisi konteks leksikal dari lingkup di mana ia didefinisikan.
* call(), apply(), bind(): Metode untuk secara eksplisit mengatur nilai this.

// ====================================================================
// VI. ASINKRONISITAS
// ====================================================================

Asynchronous JavaScript = JavaScript adalah single-threaded, tetapi dapat menangani operasi yang memakan waktu (seperti permintaan jaringan, timer) secara non-blocking menggunakan event loop.

Callbacks = Pola lama untuk menangani asinkronisitas. Bisa menyebabkan "callback hell".
Contoh:
setTimeout(() => {
console.log("Selesai setelah 2 detik");
}, 2000);

Promises (ES6) = Objek yang mewakili penyelesaian (atau kegagalan) akhir dari operasi asinkron dan nilai yang dihasilkannya.
* new Promise((resolve, reject) => { ... })
* .then() = Menangani hasil sukses.
* .catch() = Menangani error.
* .finally() = Dijalankan terlepas dari sukses/gagal.
* Promise.all(), Promise.race(), dll.

Async/Await (ES2017) = Sintaks gula di atas Promises, membuat kode asinkron terlihat dan terasa seperti kode sinkron.
Contoh:
async function fetchData() {
try {
const response = await fetch('https://api.example.com/data');
const data = await response.json();
console.log(data);
} catch (error) {
console.error("Gagal mengambil data:", error);
}
}
fetchData();

Event Loop = Mekanisme di JavaScript yang memungkinkan eksekusi non-blocking meskipun bersifat single-threaded, dengan mengelola call stack, message queue, dan web APIs/Node.js APIs.

// ====================================================================
// VII. MANIPULASI DOM (Untuk Lingkungan Browser)
// ====================================================================

DOM (Document Object Model) = Representasi terstruktur dari dokumen HTML/XML sebagai pohon objek. JavaScript berinteraksi dengan DOM untuk memanipulasi halaman web.

Memilih Elemen:
document.getElementById('id-elemen')
document.querySelector('.class-atau-id-pertama')
document.querySelectorAll('.semua-class')
document.getElementsByClassName('nama-class')
document.getElementsByTagName('nama-tag')

Memanipulasi Konten:
element.textContent = 'Teks baru';
element.innerHTML = 'Teks HTML baru';

Memanipulasi Atribut:
element.setAttribute('href', 'https://example.com');
element.getAttribute('href');
element.removeAttribute('href');
element.classList.add('nama-class');
element.classList.remove('nama-class');
element.classList.toggle('nama-class');

Memanipulasi Gaya (Style):
element.style.backgroundColor = 'blue';
element.style.color = '#fff';

Membuat dan Menambah Elemen Baru:
const newDiv = document.createElement('div');
newDiv.textContent = 'Ini div baru';
document.body.appendChild(newDiv);
parentElement.insertBefore(newElement, referenceElement);

Menghapus Elemen:
element.remove();
parentElement.removeChild(childElement);

Event Handling = Merespons interaksi pengguna atau kejadian lain di halaman web.
element.addEventListener('click', function() { console.log('Klik!'); });
element.removeEventListener('click', handlerFunction);
event.preventDefault() = Mencegah tindakan default browser.
event.stopPropagation() = Mencegah event "menggelembung" ke elemen induk.

Event Delegation = Menangani event pada elemen induk daripada setiap elemen anak secara individual, untuk performa dan kode yang lebih bersih.

// ====================================================================
// VIII. MODUL JAVASCRIPT (ES Modules)
// ====================================================================

import = Mengimpor ekspor dari modul lain.
Contoh: import { namaVariabel, namaFungsi } from './myModule.js';
import defaultExport from './myModule.js';
import * as myModule from './myModule.js';

export = Mengekspor variabel, fungsi, kelas, dll., agar dapat digunakan di modul lain.
Contoh:
export const PI = 3.14;
export function tambah(a, b) { return a + b; }
export default class MyClass { ... }

// ====================================================================
// IX. PENANGANAN ERROR
// ====================================================================

try / catch = Menangkap dan menangani error yang terjadi dalam blok try.
Contoh:
try {
// Kode yang mungkin menimbulkan error
throw new Error("Ada masalah!");
} catch (error) {
console.error("Terjadi error:", error.message);
}

finally = Blok kode yang selalu dieksekusi, terlepas dari apakah try berhasil atau catch menangani error.
Contoh:
try { /* ... / } catch (error) { / ... */ } finally { console.log("Selalu dijalankan."); }

throw = Melemparkan (menciptakan) error kustom.
Contoh: throw new Error("Input tidak valid.");

Error Types = Jenis-jenis objek Error bawaan JavaScript (Error, TypeError, ReferenceError, SyntaxError, RangeError, URIError, EvalError).

// ====================================================================
// X. FITUR CANGGIH DAN KONSEP LAINNYA
// ====================================================================

Generators (function*) = Fungsi yang dapat dihentikan dan dilanjutkan, memungkinkan pembuatan iterator yang lebih mudah.
Contoh:
function* idGenerator() { let id = 1; while(true) yield id++; }
const gen = idGenerator(); console.log(gen.next().value); // 1

Iterators & Iterables = Protokol yang memungkinkan objek untuk diiterasi (misal: dengan for...of).

Proxies (new Proxy()) = Objek yang memungkinkan Anda untuk mencegat (intercept) operasi dasar pada objek lain (target), seperti akses properti, penetapan, enumerasi, pemanggilan fungsi, dll.
Contoh:
const target = {};
const handler = { get: (obj, prop) => Properti ${prop} diakses! };
const proxy = new Proxy(target, handler);
console.log(proxy.someProperty);

Reflect = Objek bawaan yang menyediakan metode untuk operasi JavaScript yang dapat dicegat oleh Proxy.

Set (new Set()) = Koleksi nilai unik.
Contoh: const mySet = new Set([1, 2, 2, 3]); console.log(mySet); // {1, 2, 3}

Map (new Map()) = Koleksi pasangan kunci-nilai di mana kunci bisa berupa tipe data apa pun (tidak hanya string seperti objek biasa).
Contoh: const myMap = new Map(); myMap.set('nama', 'Budi'); myMap.get('nama');

WeakMap / WeakSet = Versi Map/Set di mana referensi ke objek disimpan secara "lemah" (weakly held), memungkinkan garbage collection jika tidak ada referensi lain.

Symbol.iterator = Properti yang menentukan perilaku iterasi default suatu objek.

Garbage Collection = Proses otomatis di JavaScript untuk membebaskan memori yang tidak lagi digunakan oleh program.

Hoisting = Perilaku di mana deklarasi variabel (dengan var) dan fungsi (deklarasi) dipindahkan secara konseptual ke bagian atas cakupan mereka sebelum kode dieksekusi. let dan const juga di-hoist tetapi berada di "Temporal Dead Zone".

Strict Mode ('use strict';) = Mode yang lebih ketat dalam eksekusi JavaScript, membantu menangkap error umum dan mencegah praktik buruk.

IIFE (Immediately Invoked Function Expression) = Fungsi yang dideklarasikan dan langsung dieksekusi. Digunakan untuk membuat cakupan pribadi.
Contoh: (function() { // kode di sini })();

Currying = Teknik mengubah fungsi yang mengambil banyak argumen menjadi serangkaian fungsi yang masing-masing mengambil satu argumen.

Memoization = Teknik optimasi yang digunakan untuk mempercepat program komputer dengan menyimpan hasil panggilan fungsi yang "mahal" (memakan waktu) dan mengembalikan hasil yang disimpan ketika input yang sama terjadi lagi.

Recursion = Fungsi yang memanggil dirinya sendiri untuk memecahkan masalah.

Event Bubbling & Capturing = Dua fase di mana event disebarkan melalui DOM.

Local Storage & Session Storage = API browser untuk menyimpan data di sisi klien.
localStorage.setItem('key', 'value');
localStorage.getItem('key');
sessionStorage.setItem('key', 'value');

Cookies = Mekanisme lama untuk menyimpan data kecil di sisi klien, sering digunakan untuk sesi atau preferensi.

Web Workers = Memungkinkan skrip JavaScript berjalan di latar belakang dalam thread terpisah, tanpa memblokir UI.

Fetch API = Antarmuka modern untuk membuat permintaan jaringan (HTTP requests).
Contoh: fetch('url').then(response => response.json()).then(data => console.log(data));

XMLHttpRequest (XHR) = API lama untuk membuat permintaan HTTP.

JSON (JavaScript Object Notation) = Format data ringan yang mudah dibaca manusia dan mudah diurai oleh mesin, sering digunakan untuk pertukaran data.
JSON.parse() = Mengubah string JSON menjadi objek/array JavaScript.
JSON.stringify() = Mengubah objek/array JavaScript menjadi string JSON.